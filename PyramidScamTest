pragma solidity >=0.5.0 <0.6.0;
import "remix_tests.sol"; // this import is automatically injected by Remix.
import "./PyramidScam.sol";

contract PyramidScamTest {
   
    PyramidMember PyramidMemberToTest;
    PyramidScam   PyramidScamToTest;
    uint public ntokens;
    uint public nChildren;
    uint public joiningFee      = 1500;
    uint public memberTokens    = 1000;
    uint public tokenBuyPrice   = 500;
    uint public tokenSellPrice  = 1000;
    uint public numTokensToGive = 100;
    uint public requestedPrice  = 200;
    function beforeAll () public{
       uint PyramidScamjoiningFee;
       uint PyramidScamtokenAmount;
       //Check PuramidSkam variables
       PyramidScamToTest      = new PyramidScam(joiningFee);
       PyramidScamjoiningFee  = PyramidScamToTest.joiningFee();
       PyramidScamtokenAmount = PyramidScamToTest.owner().getTokenAmount();
       Assert.equal(PyramidScamtokenAmount, memberTokens, "Wrong token Amount");
       Assert.equal(PyramidScamjoiningFee, joiningFee, "Wrong joining fee");
    }
    
    function JoinScam () public payable{
        bool foundChild = false;
        PyramidMemberToTest = PyramidScamToTest.owner().join.value(500)();
        nChildren++;
        ntokens+=memberTokens;
        Assert.equal(address(PyramidScamToTest.owner()), PyramidMemberToTest.owner(), "Wrong owner adress");
        Assert.equal(address(PyramidScamToTest), address(PyramidMemberToTest.parentScam()), "Wrong Parent Scam");
        Assert.equal(address(PyramidScamToTest.owner()), address(PyramidMemberToTest.recruiter()), "Wrong recruiter");
        for (uint i = 0; i <nChildren ; i++) {
            if (address(PyramidMemberToTest) == address(PyramidScamToTest.owner().children)) //TODO - why I cannot access i index?
                foundChild = true;
        }
        Assert.equal(foundChild, true, "Cannit find new member in Pyramid scam owner children list");
    }
    
    function setPrices() public {
        PyramidScamToTest.owner().setBuyPrice(tokenBuyPrice);
        PyramidScamToTest.owner().setSellPrice(tokenSellPrice);
        Assert.equal(PyramidScamToTest.owner().tokenBuyPrice(), tokenBuyPrice, "Wrong token buy price");
        Assert.equal(PyramidScamToTest.owner().tokenSellPrice(), tokenSellPrice, "Wrong token sell price");
       
    }
    
    function buy() public {
        uint UpdatedthisBalance   = address(this).balance + requestedPrice * numTokensToGive;
        uint updatedMemberBalance = address(PyramidScamToTest.owner()).balance - requestedPrice * numTokensToGive;
        uint updatedNtokens =  PyramidScamToTest.owner().nTokens() + numTokensToGive;
        PyramidScamToTest.owner().buy(numTokensToGive, requestedPrice);
        Assert.equal(PyramidScamToTest.owner().nTokens(), updatedNtokens, "nTokens was not updated");
        Assert.equal(address(this).balance, UpdatedthisBalance, "Balance was not upated after buying at seller");
        Assert.equal(address(PyramidScamToTest.owner()).balance, updatedMemberBalance, "Balance was not upated after buying at contract");
       
    }
}
